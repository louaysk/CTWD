{
    "name": "LoadDF_DIM_EVENT",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "event_CRM",
                        "type": "DatasetReference"
                    },
                    "name": "EVENTODS"
                },
                {
                    "dataset": {
                        "referenceName": "Show_CRM",
                        "type": "DatasetReference"
                    },
                    "name": "SHOWODS"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "DimEvent",
                        "type": "DatasetReference"
                    },
                    "name": "sink1"
                }
            ],
            "transformations": [
                {
                    "name": "join1"
                },
                {
                    "name": "alterRow1"
                },
                {
                    "name": "derivedColumn1"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          DoubleDecker as decimal(38,2),",
                "          EventID as string,",
                "          SpaceOnly as decimal(38,2),",
                "          AiOPackage as decimal(38,2),",
                "          dwtc_marketingpowerpackrev as decimal(38,2),",
                "          BoatServiceCharges as decimal(38,2),",
                "          EventType as long,",
                "          WebsiteAdv as decimal(38,2),",
                "          Discounts as decimal(38,0),",
                "          BannerAdv as decimal(38,2),",
                "          RegistrationRev as decimal(38,0),",
                "          ConfRev as decimal(38,2),",
                "          AdmissionFee as decimal(38,0),",
                "          EventStatus as long,",
                "          EventStartDate as date,",
                "          ShellScheme as decimal(38,2),",
                "          SpecialStands as decimal(38,2),",
                "          OutdoorSpaceOnly as decimal(38,2),",
                "          SpaceOnlyAED as decimal(38,2),",
                "          PriceList as string,",
                "          ShellSchemeSqm as decimal(38,2),",
                "          SponsorshipAED as decimal(38,2),",
                "          CorporateDeck as decimal(38,2),",
                "          EventIDValue as string,",
                "          EventEndDate as timestamp,",
                "          OutdoorShellScheme as long,",
                "          {BarterDisc.} as decimal(38,0),",
                "          ExhInsuranceRev as decimal(38,0),",
                "          EventName as string,",
                "          ShowName as string,",
                "          PaymentPlan as string,",
                "          Category as long,",
                "          Class as long,",
                "          OrgName as long,",
                "          EventTeam as string,",
                "          EventAdmin as string,",
                "          ShowDirector as string,",
                "          GroupEmailAddress as string,",
                "          EBSEventID as string,",
                "          {AdvancePriceCut-offDays} as long,",
                "          {StandardPriceCut-offDays} as long,",
                "          {LoyaltProductCut-offDays} as long,",
                "          EnableAuditFunctionality as boolean,",
                "          BulkfulfillOrderFlag as boolean,",
                "          Cluster as string,",
                "          dwtc_actualenddate as date",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     isolationLevel: 'READ_UNCOMMITTED',",
                "     format: 'table',",
                "     staged: true) ~> EVENTODS",
                "source(output(",
                "          ShowName as string,",
                "          ShowID as string,",
                "          CreatedOn as string,",
                "          ClusterID as string,",
                "          ClusterName as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     isolationLevel: 'READ_UNCOMMITTED',",
                "     format: 'table',",
                "     staged: true) ~> SHOWODS",
                "EVENTODS, SHOWODS join(EVENTODS@ShowName == SHOWODS@ShowName,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> join1",
                "derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
                "join1 derive(Execution_Date = currentUTC(),",
                "          EnableAuditFunctionality = toString(EnableAuditFunctionality),",
                "          {LoyaltProductCut-offDays} = toString({LoyaltProductCut-offDays}),",
                "          EventType = toString(EventType),",
                "          OrgName = toString(OrgName),",
                "          {StandardPriceCut-offDays} = toString({StandardPriceCut-offDays}),",
                "          Class = toString(Class),",
                "          Category = toString(Category),",
                "          Advance_pricecut_off_days = toString({AdvancePriceCut-offDays}),",
                "          BulkfulfillOrderFlag = toString(BulkfulfillOrderFlag)) ~> derivedColumn1",
                "alterRow1 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          Event_ID as integer,",
                "          EventID as string,",
                "          EventName as string,",
                "          ShowName as string,",
                "          ShowName2 as string,",
                "          TypeID as long,",
                "          EventStatus as long,",
                "          EventStartDate as date,",
                "          ShellScheme as decimal(38,2),",
                "          SpecialStands as decimal(38,2),",
                "          OutdoorSpaceOnly as decimal(38,2),",
                "          SpaceOnlyAED as decimal(38,2),",
                "          ShellSchemeSqm as decimal(38,2),",
                "          SponsorshipAED as decimal(38,2),",
                "          CorporateDeck as decimal(38,2),",
                "          EventIDValue as string,",
                "          ClusterName as string,",
                "          Execution_Date as timestamp,",
                "          PriceList as string,",
                "          Category as string,",
                "          Class as string,",
                "          EventType as string,",
                "          OrgName as string,",
                "          EventTeam as string,",
                "          EventAdmin as string,",
                "          ShowDirector as string,",
                "          Groupemailaddress as string,",
                "          EBSEventID as string,",
                "          Advance_pricecut_off_days as string,",
                "          Standard_price_cut_off_days as string,",
                "          Loyalty_product_cut_off_days as string,",
                "          Enable_audit_functionality as string,",
                "          Bulk_fulfill_order_flag as string",
                "     ),",
                "     deletable:false,",
                "     insertable:false,",
                "     updateable:false,",
                "     upsertable:true,",
                "     keys:['EventID'],",
                "     format: 'table',",
                "     staged: true,",
                "     allowCopyCommand: true,",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     errorHandlingOption: 'stopOnFirstError',",
                "     mapColumn(",
                "          EventID,",
                "          EventName,",
                "          ShowName = EVENTODS@ShowName,",
                "          EventStatus,",
                "          EventStartDate,",
                "          ShellScheme,",
                "          SpecialStands,",
                "          OutdoorSpaceOnly,",
                "          SpaceOnlyAED,",
                "          ShellSchemeSqm,",
                "          SponsorshipAED,",
                "          CorporateDeck,",
                "          EventIDValue,",
                "          ClusterName,",
                "          Execution_Date,",
                "          PriceList,",
                "          Category,",
                "          Class,",
                "          EventType,",
                "          OrgName,",
                "          EventTeam,",
                "          EventAdmin,",
                "          ShowDirector,",
                "          Groupemailaddress = GroupEmailAddress,",
                "          EBSEventID,",
                "          Advance_pricecut_off_days = {AdvancePriceCut-offDays},",
                "          Standard_price_cut_off_days = {StandardPriceCut-offDays},",
                "          Loyalty_product_cut_off_days = {LoyaltProductCut-offDays},",
                "          Enable_audit_functionality = EnableAuditFunctionality,",
                "          Bulk_fulfill_order_flag = BulkfulfillOrderFlag",
                "     )) ~> sink1"
            ]
        }
    }
}