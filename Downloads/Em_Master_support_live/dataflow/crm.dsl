source(output(
		email as string,
		FirstName as string,
		lastName as string,
		full_name as string,
		MobilePhone as string,
		Company as string,
		jobtitle as string,
		soundex_name as string,
		Country as string,
		DateCreated as timestamp,
		Address_line_1 as string,
		Address_line_2 as string,
		Nationality as string,
		City as string,
		Prefix as string,
		Region as string,
		ZIP_Postal_Code as string,
		State as string,
		Createdby as string,
		Modifiedby as string,
		ContactType as string,
		JobFunction as long,
		Statuscode as string,
		DesignationLevel as string,
		MobilePhone2 as string,
		PhoneNumber1 as string,
		PhoneNumber2 as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: '  SELECT email, FirstName,lastName,full_name, [MobilePhone], Company,jobtitle,soundex_name,[Country],DateCreated,Address_line_1,Address_line_2,Nationality,City,Prefix,Region,ZIP_Postal_Code,[State],Createdby,Modifiedby,ContactType,JobFunction,Statuscode,[DesignationLevel],[MobilePhone2],[PhoneNumber1],[PhoneNumber2]\n    FROM (\n      SELECT replace(email,\' \',\'\')as email,FirstName,lastName, replace(FirstName+lastName,\' \',\'\') as full_name, [MobilePhone], CompanyName as Company, JobTitle ,[Country],DateCreated,Address1_line1 as Address_line_1,Address1_line2 as Address_line_2,Nationality,Cityname as City,\'NULL\' as Prefix,\'NULL\' as Region,Address1_postalcode as ZIP_Postal_Code,Statecode as [State],Createdby,Modifiedby,ContactType,JobFunction,[Status] as Statuscode,[DesignationLevel],[MobilePhone2],[PhoneNumber1],[PhoneNumber2],\n         COALESCE(soundex(replace(FirstName,\' \',\'\')),\'NA\')\n         +COALESCE(soundex(replace(LastName,\' \',\'\')),\'NA\') \n         +COALESCE(soundex(replace(CompanyName,\' \',\'\')),\'NA\')   AS soundex_name,\n             ROW_NUMBER() OVER (PARTITION BY email ,  COALESCE(soundex(replace(FirstName,\' \',\'\')),\'NA\')\n         +COALESCE(soundex(replace(LastName,\' \',\'\')),\'NA\') \n         +COALESCE(soundex(replace(CompanyName,\' \',\'\')),\'NA\')  ORDER BY DateModified DESC) AS rn\n      FROM [EM_DWH].[DEV_CONTACT_CRM] \n    ) AS ranked_contacts\n    WHERE rn = 1 \n',
	format: 'query',
	staged: true) ~> crm
source(output(
		email as string,
		FirstName as string,
		lastName as string,
		full_name as string,
		Company as string,
		soundex_name as string,
		Address_line_1 as string,
		Address_line_2 as string,
		Nationality as string,
		City as string,
		Prefix as string,
		Region as string,
		ZIP_Postal_Code as string,
		State as string,
		Createdby as string,
		Modifiedby as string,
		ContactType as string,
		JobFunction as string,
		Statuscode as string,
		seniorityLevel as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: 'SELECT email,FirstName,lastName, full_name, Company,soundex_name,Address_line_1,Address_line_2,Nationality,City,Prefix,Region,ZIP_Postal_Code,[State],Createdby,Modifiedby,ContactType,JobFunction,Statuscode,seniorityLevel\n    FROM (\n      SELECT email, FirstName,lastName,full_name,  Company,soundex_name,Address_line_1,Address_line_2,Nationality,City,Prefix,Region,ZIP_Postal_Code,[State],Createdby,Modifiedby,ContactType,JobFunction,Statuscode,seniorityLevel,\n             ROW_NUMBER() OVER (PARTITION BY email , soundex_name ORDER BY last_modified_date DESC) AS rn\n      FROM ods.non_crm_contacts\n    ) AS ranked_contacts\n    WHERE rn = 1 ',
	format: 'query',
	staged: true) ~> noncrm
source(output(
		email as string,
		soundex_name as string,
		MobilePhone as string,
		MobilePhone2 as string,
		PhoneNumber1 as string,
		PhoneNumber2 as string,
		jobtitle as string,
		IsBounced as string,
		IsSubscribed as string,
		Country as string,
		city as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: '\nSELECT DISTINCT \n  A.email,\n  A.soundex_name,\n  FIRST_VALUE([MobilePhone]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [MobilePhone] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [MobilePhone],\n    FIRST_VALUE([MobilePhone2]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [MobilePhone2] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [MobilePhone2],\n  FIRST_VALUE([PhoneNumber1]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [PhoneNumber1] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [PhoneNumber1],\n  FIRST_VALUE([PhoneNumber2]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [PhoneNumber2] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [PhoneNumber2],\n  FIRST_VALUE([jobtitle]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [jobtitle] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [jobtitle],\n  FIRST_VALUE([IsBounced]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [IsBounced] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [IsBounced],\n  FIRST_VALUE([IsSubscribed]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [IsSubscribed] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [IsSubscribed],\n  FIRST_VALUE([Country]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [Country] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [Country],\n  FIRST_VALUE([City]) OVER(PARTITION BY email,soundex_name ORDER BY CASE WHEN [Country] is NULL then 0 else 1 END DESC, last_modified_date desc) AS [city]\nFROM ods.all_contacts AS A ',
	format: 'query',
	staged: true) ~> TOT
source(output(
		email as string,
		soundex_name as string,
		DateCreated as timestamp,
		Contact_Created_Source as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: ' SELECT email,soundex_name,DateCreated,[source] as Contact_Created_Source\n    FROM (\n      SELECT  email,soundex_name,DateCreated,[source],\n             ROW_NUMBER() OVER (PARTITION BY email , soundex_name ORDER BY last_modified_date ASC) AS rn\n      FROM ods.all_contacts\n      --where DateCreated is not null\n    ) AS ranked_contacts\n    WHERE rn = 1 ',
	format: 'query',
	staged: true) ~> source2
source(output(
		email as string,
		soundex_name as string,
		max_modified_date as timestamp,
		Birth_Certif as timestamp,
		has_crm_contact as integer
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: '/****** Script for SelectTopNRows command from SSMS  ******/\nSELECT [email]\n      ,[soundex_name]\n      ,[max_modified_date]\n      ,[Birth_Certif]\n      ,[has_crm_contact]\n  FROM [ods].[deduplicated_contacts] ',
	format: 'query',
	staged: true) ~> source3
derivedColumn6 select(mapColumn(
		email_crm = email,
		FirstName_crm = FirstName,
		lastName_crm = lastName,
		full_name_crm = full_name,
		MobilePhone_crm = MobilePhone,
		Company_crm = Company,
		jobtitle_crm = jobtitle,
		soundex_name_crm = soundex_name,
		Country_crm = Country,
		DateCreated_crm = DateCreated,
		Address_line_1_crm = Address_line_1,
		Address_line_2_crm = Address_line_2,
		Nationality_crm = Nationality,
		City_crm = City,
		Prefix_crm = Prefix,
		Region_crm = Region,
		ZIP_Postal_Code_crm = ZIP_Postal_Code,
		State_crm = State,
		Createdby_crm = Createdby,
		Modifiedby_crm = Modifiedby,
		ContactType_crm = ContactType,
		JobFunction_crm = JobFunction,
		Statuscode_crm = Statuscode,
		DesignationLevel_crm = DesignationLevel,
		MobilePhone2_crm = MobilePhone2,
		PhoneNumber1_crm = PhoneNumber1,
		PhoneNumber2_crm = PhoneNumber2
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select1
derivedColumn5 select(mapColumn(
		email_ncrm = email,
		FirstName_ncrm = FirstName,
		lastName_ncrm = lastName,
		full_name_ncrm = full_name,
		Company_ncrm = Company,
		soundex_name_ncrm = soundex_name,
		Address_line_1_ncrm = Address_line_1,
		Address_line_2_ncrm = Address_line_2,
		Nationality_ncrm = Nationality,
		City_ncrm = City,
		Prefix_ncrm = Prefix,
		Region_ncrm = Region,
		ZIP_Postal_Code_ncrm = ZIP_Postal_Code,
		State_ncrm = State,
		Createdby_ncrm = Createdby,
		Modifiedby_ncrm = Modifiedby,
		ContactType_ncrm = ContactType,
		JobFunction_ncrm = JobFunction,
		Statuscode_ncrm = Statuscode,
		seniorityLevel_ncrm = seniorityLevel
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select2
derivedColumn4 select(mapColumn(
		email,
		soundex_name,
		MobilePhone,
		jobtitle,
		IsBounced,
		IsSubscribed,
		Country,
		city,
		MobilePhone2,
		PhoneNumber1,
		PhoneNumber2
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select3
derivedColumn3 select(skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select4
source3 select(mapColumn(
		email,
		soundex_name,
		max_modified_date,
		Birth_Certif,
		has_crm_contact
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select5
derivedColumn2, select1 join(upper(email) == upper(email_crm)
	&& upper(soundex_name) == upper(soundex_name_crm),
	joinType:'left',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join1
join1 select(mapColumn(
		email_dc = email,
		soundex_name_dc = soundex_name,
		max_modified_date_dc = max_modified_date,
		Birth_Certif_dc = Birth_Certif,
		has_crm_contact_dc = has_crm_contact,
		email_crm,
		FirstName_crm,
		lastName_crm,
		full_name_crm,
		MobilePhone_crm,
		Company_crm,
		jobtitle_crm,
		soundex_name_crm,
		Country_crm,
		DateCreated_crm,
		Address_line_1_crm,
		Address_line_2_crm,
		Nationality_crm,
		City_crm,
		Prefix_crm,
		Region_crm,
		ZIP_Postal_Code_crm,
		State_crm,
		Createdby_crm,
		Modifiedby_crm,
		ContactType_crm,
		JobFunction_crm,
		Statuscode_crm,
		DesignationLevel_crm,
		MobilePhone2_crm,
		PhoneNumber1_crm,
		PhoneNumber2_crm
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select6
select6, select2 join(upper(soundex_name_dc) == upper(soundex_name_ncrm)
	&& upper(email_dc) == upper(email_ncrm),
	joinType:'left',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join2
select3, select4 join(upper(select3@soundex_name) == upper(select4@soundex_name)
	&& upper(select3@email) == upper(select4@email),
	joinType:'left',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join3
join2 select(mapColumn(
		email_dc,
		soundex_name_dc,
		max_modified_date_dc,
		Birth_Certif_dc,
		has_crm_contact_dc,
		email_crm,
		FirstName_crm,
		lastName_crm,
		full_name_crm,
		MobilePhone_crm,
		Company_crm,
		jobtitle_crm,
		soundex_name_crm,
		Country_crm,
		DateCreated_crm,
		Address_line_1_crm,
		Address_line_2_crm,
		Nationality_crm,
		City_crm,
		Prefix_crm,
		Region_crm,
		ZIP_Postal_Code_crm,
		State_crm,
		Createdby_crm,
		Modifiedby_crm,
		ContactType_crm,
		JobFunction_crm,
		Statuscode_crm,
		email_ncrm,
		FirstName_ncrm,
		lastName_ncrm,
		full_name_ncrm,
		Company_ncrm,
		soundex_name_ncrm,
		Address_line_1_ncrm,
		Address_line_2_ncrm,
		Nationality_ncrm,
		City_ncrm,
		Prefix_ncrm,
		Region_ncrm,
		ZIP_Postal_Code_ncrm,
		State_ncrm,
		Createdby_ncrm,
		Modifiedby_ncrm,
		ContactType_ncrm,
		JobFunction_ncrm,
		Statuscode_ncrm,
		seniorityLevel_ncrm,
		DesignationLevel_crm,
		MobilePhone2_crm,
		PhoneNumber1_crm,
		PhoneNumber2_crm
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select7
select7, select8 join(upper(soundex_name_dc) == upper(soundex_name_tot)
	&& upper(email_dc) == upper(email_tot),
	joinType:'left',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join4
join3 select(mapColumn(
		email_tot = select3@email,
		soundex_name_tot = select3@soundex_name,
		MobilePhone_tot = MobilePhone,
		jobtitle_tot = jobtitle,
		IsBounced_tot = IsBounced,
		IsSubscribed_tot = IsSubscribed,
		Country_tot = Country,
		DateCreated_tot = DateCreated,
		Contact_Created_Source_tot = Contact_Created_Source,
		city_tot = city,
		MobilePhone2_tot = MobilePhone2,
		PhoneNumber1_tot = PhoneNumber1,
		PhoneNumber2_tot = PhoneNumber2
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select8
join4 select(mapColumn(
		email_dc,
		soundex_name_dc,
		max_modified_date_dc,
		Birth_Certif_dc,
		has_crm_contact_dc,
		FirstName_crm,
		lastName_crm,
		full_name_crm,
		Company_crm,
		DateCreated_crm,
		Address_line_1_crm,
		Address_line_2_crm,
		Nationality_crm,
		City_crm,
		Prefix_crm,
		Region_crm,
		ZIP_Postal_Code_crm,
		State_crm,
		Createdby_crm,
		Modifiedby_crm,
		ContactType_crm,
		JobFunction_crm,
		seniorityLevel_ncrm,
		Statuscode_crm,
		FirstName_ncrm,
		lastName_ncrm,
		full_name_ncrm,
		Company_ncrm,
		Address_line_1_ncrm,
		Address_line_2_ncrm,
		Nationality_ncrm,
		City_ncrm,
		Prefix_ncrm,
		Region_ncrm,
		ZIP_Postal_Code_ncrm,
		State_ncrm,
		Createdby_ncrm,
		Modifiedby_ncrm,
		ContactType_ncrm,
		JobFunction_ncrm,
		Statuscode_ncrm,
		MobilePhone_tot,
		jobtitle_tot,
		IsBounced_tot,
		IsSubscribed_tot,
		Country_tot,
		DateCreated_tot,
		Contact_Created_Source_tot,
		DesignationLevel_crm,
		city_tot,
		MobilePhone2_crm,
		PhoneNumber1_crm,
		PhoneNumber2_crm,
		MobilePhone2_tot,
		PhoneNumber1_tot,
		PhoneNumber2_tot
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select9
select9 derive(GRFirstName = iif(has_crm_contact_dc==1, coalesce(FirstName_crm), coalesce(FirstName_ncrm)),
		GRLastName = iif(has_crm_contact_dc==1, coalesce(lastName_crm), coalesce(lastName_ncrm)),
		GRFullName = iif(has_crm_contact_dc==1, coalesce(full_name_crm), coalesce(full_name_ncrm)),
		GRCompany = iif(has_crm_contact_dc==1, coalesce(Company_crm), coalesce(Company_ncrm)),
		GRaddressline1 = iif(has_crm_contact_dc==1, coalesce(Address_line_1_crm), coalesce(Address_line_1_ncrm)),
		GRAddressline2 = iif(has_crm_contact_dc==1, coalesce(Address_line_2_crm), coalesce(Address_line_2_ncrm)),
		GRNationality = iif(has_crm_contact_dc==1, coalesce(Nationality_crm), coalesce(Nationality_ncrm)),
		GRZIP_Postal_Code = iif(has_crm_contact_dc==1, coalesce(ZIP_Postal_Code_crm), coalesce(ZIP_Postal_Code_ncrm)),
		GRRegion = iif(has_crm_contact_dc==1, coalesce(Region_crm), coalesce(Region_ncrm)),
		GRCity = iif(has_crm_contact_dc==1, coalesce(City_crm), coalesce(City_ncrm)),
		GRPrefix = iif(has_crm_contact_dc==1, coalesce(Prefix_crm), coalesce(Prefix_ncrm)),
		GRJobFunction = iif(has_crm_contact_dc==1, coalesce(JobFunction_crm), coalesce(toLong(JobFunction_ncrm))),
		GRContactType = iif(has_crm_contact_dc==1, coalesce(ContactType_crm), coalesce(ContactType_ncrm)),
		GRModifiedby = iif(has_crm_contact_dc==1, coalesce(Modifiedby_crm), coalesce(Modifiedby_ncrm)),
		GRCreatedby = iif(has_crm_contact_dc==1, coalesce(Createdby_crm), coalesce(Createdby_ncrm)),
		GRState = iif(has_crm_contact_dc==1, coalesce(State_crm), coalesce(State_ncrm)),
		GRStatuscode = iif(has_crm_contact_dc==1, coalesce(Statuscode_crm), coalesce(Statuscode_ncrm)),
		Globally_Unsubscribed = case( IsSubscribed_tot == 'false', 'true', IsSubscribed_tot == 'true',  'false','false'),
		Email_HardBounce = IsBounced_tot,
		Country = Country_tot,
		JobTitle = jobtitle_tot,
		MobilePhone = MobilePhone_tot,
		SeniorityLevel = iif(has_crm_contact_dc==1, coalesce(DesignationLevel_crm), coalesce(seniorityLevel_ncrm))) ~> derivedColumn1
derivedColumn1 select(mapColumn(
		email = email_dc,
		soundex_name = soundex_name_dc,
		max_modified_date = max_modified_date_dc,
		Birth_Certif = Birth_Certif_dc,
		has_crm_contact = has_crm_contact_dc,
		DateCreated = DateCreated_tot,
		Contact_Created_Source = Contact_Created_Source_tot,
		FirstName = GRFirstName,
		LastName = GRLastName,
		FullName = GRFullName,
		Company = GRCompany,
		addressline1 = GRaddressline1,
		Addressline2 = GRAddressline2,
		Nationality = GRNationality,
		ZIP_Postal_Code = GRZIP_Postal_Code,
		Region = GRRegion,
		City = city_tot,
		Prefix = GRPrefix,
		JobFunction = GRJobFunction,
		ContactType = GRContactType,
		Modifiedby = GRModifiedby,
		Createdby = GRCreatedby,
		State = GRState,
		Statuscode = GRStatuscode,
		Globally_Unsubscribed,
		Email_HardBounce,
		Country,
		JobTitle,
		MobilePhone,
		SeniorityLevel,
		MobilePhone2 = MobilePhone2_tot,
		PhoneNumber1 = PhoneNumber1_tot,
		PhoneNumber2 = PhoneNumber2_tot
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select10
select5 derive(email = iifNull(email, 'NOTAVAILABLE')) ~> derivedColumn2
source2 derive(email = iifNull(email, 'NOTAVAILABLE')) ~> derivedColumn3
TOT derive(email = iifNull(email, 'NOTAVAILABLE')) ~> derivedColumn4
noncrm derive(email = iifNull(email, 'NOTAVAILABLE')) ~> derivedColumn5
crm derive(email = iifNull(email, 'NOTAVAILABLE')) ~> derivedColumn6
select10 derive(email = iif(email=='NOTAVAILABLE', toString(null()), email)) ~> derivedColumn7
derivedColumn7 sink(allowSchemaDrift: true,
	validateSchema: false,
	input(
		email as string,
		soundex_name as string,
		max_modified_date as timestamp,
		Birth_Certif as timestamp,
		has_crm_contact as integer,
		DateCreated as timestamp,
		Contact_Created_Source as string,
		FirstName as string,
		LastName as string,
		FullName as string,
		Company as string,
		addressline1 as string,
		Addressline2 as string,
		Nationality as string,
		ZIP_Postal_Code as string,
		Region as string,
		City as string,
		Prefix as string,
		JobFunction as long,
		ContactType as string,
		Modifiedby as string,
		Createdby as string,
		State as string,
		Statuscode as string,
		Globally_Unsubscribed as string,
		Email_HardBounce as string,
		Country as string,
		JobTitle as string,
		MobilePhone as string,
		SeniorityLevel as string
	),
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	staged: true,
	allowCopyCommand: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError') ~> sink1