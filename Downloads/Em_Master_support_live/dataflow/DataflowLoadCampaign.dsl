source(output(
		actualCost as string,
		adCampaignId as string,
		budgetedCost as string,
		campaignCategory as string,
		campaignClassification as string,
		campaignType as string,
		createdAt as string,
		createdBy as string,
		crmId as string,
		currentStatus as string,
		depth as string,
		endAt as string,
		fieldValues as string,
		folderId as string,
		id as string,
		isEmailMarketingCampaign as string,
		isIncludedInROI as string,
		isSyncedWithCRM as string,
		name as string,
		permissions as string,
		product as string,
		referenceProduct as string,
		region as string,
		startAt as string,
		type as string,
		updatedAt as string,
		updatedBy as string,
		page as string,
		pageSize as string,
		total as string,
		Instance as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	documentForm: 'documentPerLine') ~> source1
source(output(
		Instance as string,
		actualCost as double,
		adCampaignId as string,
		budgetedCost as double,
		campaignCategory as string,
		campaignClassification as string,
		campaignType as string,
		createdAt as integer,
		createdBy as short,
		crmId as string,
		currentStatus as string,
		depth as string,
		endAt as integer,
		fieldValues as string,
		firstActivation as integer,
		folderId as short,
		id as short,
		isEmailMarketingCampaign as boolean,
		isIncludedInROI as boolean,
		isSyncedWithCRM as boolean,
		name as string,
		pageSize as short,
		permissions as string,
		product as string,
		referenceProduct as string,
		region as string,
		startAt as integer,
		total as short,
		type as string,
		updatedAt as integer,
		updatedBy as short
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	documentForm: 'documentPerLine') ~> source2
source(output(
		actualCost as string,
		adCampaignId as string,
		budgetedCost as string,
		campaignCategory as string,
		campaignClassification as string,
		campaignType as string,
		createdAt as string,
		createdBy as string,
		crmId as string,
		currentStatus as string,
		depth as string,
		endAt as string,
		fieldValues as string,
		firstActivation as string,
		folderId as string,
		id as string,
		isEmailMarketingCampaign as string,
		isIncludedInROI as string,
		isSyncedWithCRM as string,
		name as string,
		permissions as string,
		product as string,
		referenceProduct as string,
		region as string,
		startAt as string,
		type as string,
		updatedAt as string,
		updatedBy as string,
		pageSize as string,
		total as string,
		Instance as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	documentForm: 'documentPerLine') ~> source3
derivedColumn5, derivedColumn6, derivedColumn7 union(byName: true)~> union1
source1 select(mapColumn(
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignCategory,
		campaignClassification,
		campaignType,
		createdAt,
		createdBy,
		crmId,
		currentStatus,
		depth,
		endAt,
		fieldValues,
		folderId,
		id,
		isEmailMarketingCampaign,
		isIncludedInROI,
		isSyncedWithCRM,
		name,
		permissions,
		product,
		referenceProduct,
		region,
		startAt,
		type,
		updatedAt,
		updatedBy,
		Instance
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select1
source2 select(mapColumn(
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignCategory,
		campaignClassification,
		campaignType,
		createdAt,
		createdBy,
		crmId,
		currentStatus,
		endAt,
		fieldValues,
		firstActivation,
		folderId,
		id,
		isEmailMarketingCampaign,
		isIncludedInROI,
		isSyncedWithCRM,
		name,
		permissions,
		product,
		referenceProduct,
		region,
		startAt,
		type,
		updatedAt,
		updatedBy,
		Instance
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select2
source3 select(mapColumn(
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignCategory,
		campaignClassification,
		campaignType,
		createdAt,
		createdBy,
		crmId,
		currentStatus,
		endAt,
		fieldValues,
		firstActivation,
		folderId,
		id,
		isEmailMarketingCampaign,
		isIncludedInROI,
		isSyncedWithCRM,
		name,
		permissions,
		product,
		referenceProduct,
		region,
		startAt,
		type,
		updatedAt,
		updatedBy,
		Instance
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select3
union1 derive(createdAt = toTimestamp(toInteger(createdAt)*1000l,'yyyy-MM-dd HH:mm:ss'),
		updatedAt = toTimestamp(toInteger(createdAt)*1000l,'yyyy-MM-dd HH:mm:ss'),
		endAt = toTimestamp(toInteger(createdAt)*1000l,'yyyy-MM-dd HH:mm:ss'),
		startAt = toTimestamp(toInteger(createdAt)*1000l,'yyyy-MM-dd HH:mm:ss')) ~> derivedColumn4
select1 derive(each(match(1==1), $$ = toString($$))) ~> derivedColumn5
select2 derive(each(match(1==1), $$ = toString($$))) ~> derivedColumn6
select3 derive(each(match(1==1), $$ = toString($$))) ~> derivedColumn7
derivedColumn4 sink(allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	staged: true,
	allowCopyCommand: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError') ~> sink1