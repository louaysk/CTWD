source(output(
		QID as string,
		UAID as string,
		Display_Question as string,
		Question as string,
		ALID as string,
		{Answers List} as string,
		Question_Type as string,
		{Question_ValueType New} as string,
		{Type New} as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	format: 'excel',
	fileSystem: 'em-data',
	folderPath: 'Input Files',
	fileName: 'DATA STANDARDS.xlsx',
	sheetIndex: 0,
	firstRowAsHeader: true) ~> source1
source(output(
		UID as short,
		QID as string,
		{Question Name} as string,
		ALID as string,
		AnswersList as string,
		UAID as string,
		AnswerValue as string,
		AID as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	format: 'excel',
	fileSystem: 'em-data',
	folderPath: 'Input Files',
	fileName: 'DATA STANDARDS.xlsx',
	sheetIndex: 1,
	firstRowAsHeader: true) ~> source2
source(output(
		Country as string,
		{Country Question Domain ID} as string,
		{Country Answer Domain ID} as string,
		{UAID-Country} as string,
		Country_Code as string,
		DWTC_region as string,
		{UAID-Region} as string,
		{Region Domain ID} as string,
		ISO2 as string,
		ISO3 as string,
		{UAID-Nationality} as string,
		{Nationality Domain ID} as string,
		{Nationality New} as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	format: 'excel',
	fileSystem: 'em-data',
	folderPath: 'Input Files',
	fileName: 'DATA STANDARDS.xlsx',
	sheetIndex: 2,
	firstRowAsHeader: true) ~> source3
source(output(
		UID as short,
		{Industry Question Domain ID} as string,
		{Industry Answer Domain ID} as string,
		{Industry ID} as short,
		{New Industry ID} as string,
		{Industry Text} as string,
		{Sub Industry Question Domain ID} as string,
		{Sub Industry Answer Domain ID} as string,
		{Sub Industry ID} as short,
		{New Sub Industry ID} as string,
		{SubIndustry Text} as string,
		{Product Question Domain ID} as string,
		{Product Answer Domain ID} as string,
		{Product ID} as short,
		{New Product ID} as string,
		{Product Text} as string,
		{Sub-Product Question Domain ID} as string,
		{Sub-Product Answer Domain ID} as string,
		{Sub-Product ID} as short,
		{New Sub-Product ID} as string,
		{Sub-Product Text} as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	format: 'excel',
	fileSystem: 'em-data',
	folderPath: 'Input Files',
	fileName: 'DATA STANDARDS.xlsx',
	sheetIndex: 3,
	firstRowAsHeader: true) ~> source4
source1 sink(allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	staged: true,
	allowCopyCommand: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError',
	mapColumn(
		QID,
		UAID,
		Display_Question,
		Question,
		ALID,
		Answers_List = {Answers List},
		Question_Type,
		Question_ValueTypeNew = {Question_ValueType New},
		TypeNew = {Type New}
	)) ~> sink1
source2 sink(allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	staged: true,
	allowCopyCommand: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError',
	mapColumn(
		UID,
		QID,
		Question_Name = {Question Name},
		ALID,
		AnswersList,
		UAID,
		AnswerValue,
		AID
	)) ~> sink2
source3 sink(allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	staged: true,
	allowCopyCommand: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError',
	mapColumn(
		Country,
		Country_Question_DomainID = {Country Question Domain ID},
		Country_AnswerDomainID = {Country Answer Domain ID},
		{UAID-Country},
		Country_Code,
		DWTC_region,
		{UAID-Region},
		RegionDomainID = {Region Domain ID},
		ISO2,
		ISO3,
		{UAID-Nationality},
		NationalityDomainID = {Nationality Domain ID},
		NationalityNew = {Nationality New}
	)) ~> sink3
source4 sink(allowSchemaDrift: true,
	validateSchema: false,
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	staged: true,
	allowCopyCommand: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError',
	mapColumn(
		UID,
		Industry_Question_DomainID = {Industry Question Domain ID},
		Industry_Answer_DomainID = {Industry Answer Domain ID},
		IndustryID = {Industry ID},
		NewIndustryID = {New Industry ID},
		IndustryText = {Industry Text},
		SubIndustryQuestionDomainID = {Sub Industry Question Domain ID},
		SubIndustryAnswerDomainID = {Sub Industry Answer Domain ID},
		SubIndustryID = {Sub Industry ID},
		NewSubIndustryID = {New Sub Industry ID},
		SubIndustryText = {SubIndustry Text},
		ProductQuestionDomainID = {Product Question Domain ID},
		ProductAnswerDomainID = {Product Answer Domain ID},
		ProductID = {Product ID},
		NewProductID = {New Product ID},
		ProductText = {Product Text},
		{Sub-ProductQuestionDomainID} = {Sub-Product Question Domain ID},
		{Sub-ProductAnswerDomainID} = {Sub-Product Answer Domain ID},
		{Sub-ProductID} = {Sub-Product ID},
		{NewSub-ProductID} = {New Sub-Product ID},
		{Sub-ProductText} = {Sub-Product Text}
	)) ~> sink4