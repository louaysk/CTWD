source(output(
		campaignCategory as string,
		createdAt as timestamp,
		createdBy as string,
		currentStatus as string,
		description as string,
		endAt as timestamp,
		folderId as string,
		id as string,
		isEmailMarketingCampaign as string,
		name as string,
		permissions as string,
		startAt as timestamp,
		type as string,
		updatedAt as timestamp,
		updatedBy as string,
		Instance as string,
		actualCost as string,
		adCampaignId as string,
		budgetedCost as string,
		campaignClassification as string,
		campaignType as string,
		crmId as string,
		fieldValues as string,
		firstActivation as string,
		isIncludedInROI as string,
		isSyncedWithCRM as string,
		memberCount as string,
		product as string,
		referenceProduct as string,
		region as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table',
	staged: true) ~> source1
source(output(
		DoubleDecker as decimal(38,2),
		EventID as string,
		SpaceOnly as decimal(38,2),
		AiOPackage as decimal(38,2),
		dwtc_marketingpowerpackrev as decimal(38,2),
		BoatServiceCharges as decimal(38,2),
		TypeID as long,
		WebsiteAdv as decimal(38,2),
		Discounts as decimal(38,0),
		BannerAdv as decimal(38,2),
		RegistrationRev as decimal(38,0),
		ConfRev as decimal(38,2),
		AdmissionFee as decimal(38,0),
		EventStatus as long,
		EventStartDate as date,
		ShellScheme as decimal(38,2),
		SpecialStands as decimal(38,2),
		OutdoorSpaceOnly as decimal(38,2),
		SpaceOnlyAED as decimal(38,2),
		ShellSchemeSqm as decimal(38,2),
		SponsorshipAED as decimal(38,2),
		CorporateDeck as decimal(38,2),
		EventIDValue as string,
		dwtc_actualenddate as date,
		OutdoorShellScheme as long,
		{BarterDisc.} as decimal(38,0),
		ExhInsuranceRev as decimal(38,0),
		EventName as string,
		ShowName as string,
		ShowName2 as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table',
	staged: true) ~> source2
source1 select(mapColumn(
		campaignCategory,
		createdAt,
		createdBy,
		currentStatus,
		description,
		endAt,
		folderId,
		id,
		isEmailMarketingCampaign,
		name,
		permissions,
		startAt,
		type,
		updatedAt,
		updatedBy,
		Instance,
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignClassification,
		campaignType,
		crmId,
		fieldValues,
		firstActivation,
		isIncludedInROI,
		isSyncedWithCRM,
		memberCount,
		product,
		referenceProduct,
		region
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select1
derivedColumn2 select(mapColumn(
		EventStartDate,
		dwtc_actualenddate,
		EventName,
		ShowName
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select2
derivedColumn1, select2 join(upper(product) == upper(EventName),
	joinType:'inner',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join1
surrogateKey1, select2 join(upper(product) == upper(ShowName),
	joinType:'inner',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join2
select5, select4 union(byName: true)~> union1
derivedColumn1 keyGenerate(output(INDEX as long),
	startAt: 1L,
	stepValue: 1L) ~> surrogateKey1
select1 derive(startAt = toDate(toString(startAt)),
		endAt = toDate(toString(endAt))) ~> derivedColumn1
source2 derive(EventStartDate = toDate(toString(EventStartDate)),
		dwtc_actualenddate = toDate(toString(dwtc_actualenddate))) ~> derivedColumn2
join2 derive(duration = minus(dwtc_actualenddate,startAt)) ~> derivedColumn3
filter3 aggregate(groupBy(INDEX),
	{Matching duration} = min(duration)) ~> aggregate1
aggregate1, derivedColumn3 join(aggregate1@INDEX == surrogateKey1@INDEX
	&& {Matching duration} == duration,
	joinType:'inner',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join3
join3 select(mapColumn(
		INDEX = aggregate1@INDEX,
		{Matching duration},
		campaignCategory,
		createdAt,
		createdBy,
		currentStatus,
		description,
		endAt,
		folderId,
		id,
		isEmailMarketingCampaign,
		name,
		permissions,
		startAt,
		type,
		updatedAt,
		updatedBy,
		Instance,
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignClassification,
		campaignType,
		crmId,
		fieldValues,
		firstActivation,
		isIncludedInROI,
		isSyncedWithCRM,
		memberCount,
		product,
		referenceProduct,
		region,
		EventStartDate,
		dwtc_actualenddate,
		EventName,
		ShowName,
		duration
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select3
join1 select(mapColumn(
		campaignCategory,
		endAt,
		id,
		name,
		startAt,
		Instance,
		currentStatus,
		product,
		EventName
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select4
select3 aggregate(groupBy(Index = INDEX,
		Instance,
		product,
		startAt,
		endAt,
		ShowName,
		{EventStartDate CRM} = EventStartDate,
		dwtc_actualenddateCRM = dwtc_actualenddate,
		id,
		campaignCategory,
		currentStatus,
		name,
		description,
		folderId,
		region,
		referenceProduct,
		isEmailMarketingCampaign,
		permissions,
		type,
		updatedAt,
		updatedBy,
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignClassification,
		crmId,
		firstActivation,
		isIncludedInROI,
		isSyncedWithCRM,
		memberCount),
	EventName = max(EventName)) ~> aggregate3
aggregate3 select(mapColumn(
		Index,
		Instance,
		product,
		startAt,
		endAt,
		ShowName,
		{EventStartDate CRM},
		dwtc_actualenddateCRM,
		id,
		campaignCategory,
		currentStatus,
		name,
		description,
		folderId,
		region,
		referenceProduct,
		isEmailMarketingCampaign,
		permissions,
		type,
		updatedAt,
		updatedBy,
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignClassification,
		crmId,
		firstActivation,
		isIncludedInROI,
		isSyncedWithCRM,
		memberCount,
		EventName
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select5
union1 select(mapColumn(
		Instance,
		product,
		startAt,
		endAt,
		ShowName,
		{EventStartDate CRM},
		dwtc_actualenddateCRM,
		id,
		campaignCategory,
		currentStatus,
		name,
		description,
		folderId,
		region,
		referenceProduct,
		isEmailMarketingCampaign,
		permissions,
		type,
		updatedAt,
		updatedBy,
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignClassification,
		crmId,
		firstActivation,
		isIncludedInROI,
		isSyncedWithCRM,
		memberCount,
		EventName
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select6
select6, select1 join(upper(select6@product) == upper(select1@product),
	joinType:'right',
	matchType:'exact',
	ignoreSpaces: false,
	broadcast: 'auto')~> join4
union2 select(mapColumn(
		EventName,
		campaignCategory,
		currentStatus,
		description,
		endAt,
		folderId,
		id,
		isEmailMarketingCampaign,
		name,
		permissions,
		startAt,
		type,
		updatedAt,
		updatedBy,
		Instance,
		actualCost,
		adCampaignId,
		budgetedCost,
		campaignClassification,
		crmId,
		firstActivation,
		isIncludedInROI,
		isSyncedWithCRM,
		memberCount,
		product,
		referenceProduct,
		region
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select7
join4 filter(isNull( select6@product)) ~> filter2
derivedColumn4, select6 union(byName: true)~> union2
filter2 select(mapColumn(
		EventName,
		campaignCategory = select1@campaignCategory,
		currentStatus = select1@currentStatus,
		description = select1@description,
		endAt = select1@endAt,
		folderId = select1@folderId,
		id = select1@id,
		isEmailMarketingCampaign = select1@isEmailMarketingCampaign,
		name = select1@name,
		permissions = select1@permissions,
		startAt = select1@startAt,
		type = select1@type,
		updatedAt = select1@updatedAt,
		updatedBy = select1@updatedBy,
		Instance = select1@Instance,
		actualCost = select1@actualCost,
		adCampaignId = select1@adCampaignId,
		budgetedCost = select1@budgetedCost,
		campaignClassification = select1@campaignClassification,
		crmId = select1@crmId,
		firstActivation = select1@firstActivation,
		isIncludedInROI = select1@isIncludedInROI,
		isSyncedWithCRM = select1@isSyncedWithCRM,
		memberCount = select1@memberCount,
		product = select1@product,
		referenceProduct = select1@referenceProduct,
		region = select1@region
	),
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true) ~> select8
select8 derive(startAt = toDate(toString(endAt)),
		endAt = toDate(toString(endAt))) ~> derivedColumn4
derivedColumn3 filter(duration>-200) ~> filter3
select7 sink(allowSchemaDrift: true,
	validateSchema: false,
	input(
		Instance as string,
		product as string,
		startAt as date,
		endAt as date,
		ShowName as string,
		EventStartDateCRM as date,
		dwtc_actualenddateCRM as date,
		id as string,
		campaignCategory as string,
		currentStatus as string,
		EventName as string
	),
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:false,
	truncate:true,
	format: 'table',
	staged: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError',
	partitionBy('hash', 1)) ~> sink1