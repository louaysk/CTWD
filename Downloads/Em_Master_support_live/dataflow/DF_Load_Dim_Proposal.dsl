source(output(
		{Amount-Quote} as decimal(38,2),
		CreatedOn as string,
		Quoteid as string,
		OpportunityID as string,
		StatusCode as long,
		Netsqm as decimal(38,2),
		Barter as boolean,
		QuoteState as long,
		TypeOfContact as long,
		Paymentplan as string,
		RevisionID as long,
		name as string,
		PotentialCustomer as string,
		EventName as string,
		ownerid as string,
		EventSector as string,
		discountlevel as long,
		dwtc_reasonfordiscountrequest as long,
		ccs_amendmenttype as long,
		dwtc_justification as string,
		ccs_description as string,
		dwtc_totaldiscountamount as decimal(38,2),
		ccs_totalpercentagediscount as decimal(38,5),
		dwtc_islatestdiscountapprovedsentforapproval as boolean,
		dwtc_expiredproductexceptionrequired as boolean,
		dwtc_islatestbarterapproved as boolean,
		dwtc_discountapprovalmemostatus as long,
		dwtc_expiredproductmemostatus as long,
		dwtc_bartermemostatus as long,
		dwtc_oafapprovalstatus as long,
		QuoteStateValue as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: 'select c.*, d.[value] as QuoteStateValue\n  FROM [ods].[EM_Proposal_CRM] c left join (select * from \n  [ods].[EM_StringMap_CRM]  a \n  where  [objecttypecode] = \'quote\' and [attributename]=\'statecode\') d\n  on c.[QuoteState]=d.[attributevalue]\n',
	format: 'query',
	staged: true) ~> OdsProposal
source(output(
		Opportunity_ID as integer,
		Event_ID as integer,
		Customer_ID as integer,
		Lead_ID as integer,
		OpportunityNumber as string,
		OpportunityId as string,
		StageCode as string,
		RequesterID as string,
		AgentID as string,
		DiscountAmount as decimal(38,2),
		RequestorType as string,
		TotalAmountofOpportunity as decimal(38,2),
		TradeAssocID as string,
		Status as string,
		{CreatedOn-Opportunity} as string,
		NetSQMofOpportunity as decimal(38,2),
		{RetainedY/N} as string,
		OnwerID as string,
		ProbabilityCode as long,
		OpportunityClosingDate as timestamp,
		Execution_Date as timestamp
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	format: 'table',
	staged: true) ~> DimOpportunity
source(output(
		Account_ID as integer,
		CountryID as string,
		CountryName as string,
		SectorName as string,
		Name as string,
		IndustryName as string,
		CompanyID as string,
		SubIndustryID as string,
		POBox as string,
		address1_line1 as string,
		address2_line2 as string,
		statecode as long,
		address1_postalcode as string,
		Region as string,
		emailaddress1 as string,
		websiteurl as string,
		telephone2 as string,
		dwtc_billingtosameasaddress1 as boolean,
		dwtc_billingcityname as string,
		dwtc_billingpostcodezipcode as string,
		dwtc_billingcountryname as string,
		dwtc_companyannualrev as long,
		telephone1 as string,
		City as string,
		PrimaryContactID as string,
		BillToContactName as string,
		Company_ID as integer,
		Execution_Date as timestamp
	),
	allowSchemaDrift: true,
	validateSchema: false,
	isolationLevel: 'READ_UNCOMMITTED',
	query: 'select * from EM_DWH.\nDev_Account_CRM\n',
	format: 'query',
	staged: true) ~> AccountCRM
OdsProposal, DimOpportunity lookup(OdsProposal@OpportunityID == DimOpportunity@OpportunityId,
	multiple: false,
	pickup: 'any',
	broadcast: 'auto')~> lookup1
lookup1 derive(Execution_Date = currentUTC(),
		CreatedOn = toTimestamp(split(replace(CreatedOn,'T',' '), '.')[1]),
		discountlevel = toString(discountlevel),
		RevisionID = toString(RevisionID),
		dwtc_reasonfordiscountrequest = toString(dwtc_reasonfordiscountrequest),
		ccs_amendmenttype = toString(ccs_amendmenttype),
		dwtc_islatestdiscountapprovedsentforapproval = toString(dwtc_islatestdiscountapprovedsentforapproval),
		dwtc_islatestbarterapproved = toString(dwtc_islatestbarterapproved),
		dwtc_discountapprovalmemostatus = toString(dwtc_discountapprovalmemostatus),
		dwtc_expiredproductmemostatus = toString(dwtc_expiredproductmemostatus),
		dwtc_bartermemostatus = toString(dwtc_bartermemostatus),
		dwtc_oafapprovalstatus = toString(dwtc_oafapprovalstatus),
		TypeOfContact = toString(TypeOfContact),
		Barter = toString(Barter)) ~> derivedColumn1
lookup2 alterRow(upsertIf(1==1)) ~> alterRow1
derivedColumn1, AccountCRM lookup(PotentialCustomer == CompanyID,
	multiple: false,
	pickup: 'any',
	broadcast: 'auto')~> lookup2
alterRow1 sink(allowSchemaDrift: true,
	validateSchema: false,
	input(
		Proposal_ID as integer,
		QuoteID as string,
		Opportunity_ID as integer,
		{Amount-Quote} as decimal(38,2),
		Netsqm as decimal(38,2),
		StatusCode as long,
		CreatedOn as timestamp,
		QuoteState as string,
		Execution_Date as timestamp,
		Typeofcontract as string,
		Paymentplan as string,
		RevisionID as string,
		Name as string,
		Potentialcustomer as string,
		Eventname as string,
		Owner as string,
		EventSector as string,
		DiscountLevel as string,
		ReasonforDiscountRequest as string,
		AmendmentType as string,
		Justification as string,
		Description as string,
		TotalAEDDiscount as decimal(38,2),
		TotalDiscount as decimal(38,2),
		IsLatestDiscountApproved as string,
		ExpiredProductApproved as string,
		LatestBarterApproved as string,
		LatestOAFApproved as string,
		DiscountApprovalMemoStatus as string,
		ExpiredProductMemoStatus as string,
		BarterMemoStatus as string,
		OAFApprovalStatus as string,
		Barter as string,
		CompanyID as integer
	),
	deletable:false,
	insertable:true,
	updateable:false,
	upsertable:true,
	keys:['QuoteID'],
	format: 'table',
	staged: true,
	allowCopyCommand: true,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	errorHandlingOption: 'stopOnFirstError',
	mapColumn(
		QuoteID = Quoteid,
		Opportunity_ID,
		{Amount-Quote},
		Netsqm,
		StatusCode,
		CreatedOn,
		QuoteState = QuoteStateValue,
		Execution_Date,
		Typeofcontract = TypeOfContact,
		Paymentplan,
		RevisionID,
		Name = name,
		Potentialcustomer = PotentialCustomer,
		Eventname = EventName,
		Owner = ownerid,
		EventSector,
		DiscountLevel = discountlevel,
		ReasonforDiscountRequest = dwtc_reasonfordiscountrequest,
		AmendmentType = ccs_amendmenttype,
		Justification = dwtc_justification,
		Description = ccs_description,
		TotalAEDDiscount = dwtc_totaldiscountamount,
		TotalDiscount = ccs_totalpercentagediscount,
		IsLatestDiscountApproved = dwtc_islatestdiscountapprovedsentforapproval,
		LatestBarterApproved = dwtc_islatestbarterapproved,
		IsLatestDiscountApproved = dwtc_discountapprovalmemostatus,
		ExpiredProductMemoStatus = dwtc_expiredproductmemostatus,
		BarterMemoStatus = dwtc_bartermemostatus,
		OAFApprovalStatus = dwtc_oafapprovalstatus,
		Barter,
		CompanyID = Company_ID
	)) ~> sink1